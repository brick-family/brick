import { IFunctionData } from '../../types';

/**
 * 集合函数
 */
export const CollectionFunctionData: IFunctionData[] = [
  {
    id: 'INTERSECTI',
    name: 'INTERSECTI',
    type: '集合函数',
    info: '<p>计算两个集合的交集</p><p>例1：INTERSECTIONSET([5,6,7,7],[4,4,3,2,5,7])</p><p>结果：[5, 7]</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'object',
    param: false,
  },
  {
    id: 'UNIONSET',
    name: 'UNIONSET',
    type: '集合函数',
    info: '<p>计算两个集合的并集</p><p>例1：UNIONSET([5,6,7,7],[4,4,3,2,5,7])</p><p>结果：[5, 6, 7, 4, 3, 2]</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'object',
    param: false,
  },
  {
    id: 'DIFFERENCE',
    name: 'DIFFERENCE',
    type: '集合函数',
    info: '<p>计算两个集合的差集</p><p>例1：DIFFERENCE([5,6,7,7],[4,4,3,2,5,7])</p><p>结果：[6, 4, 3, 2]</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'object',
    param: false,
  },
  {
    id: 'SUBSET',
    name: 'SUBSET',
    type: '集合函数',
    info: '<p>计算第二个集合是否第一个集合的子集</p><p>例1：SUBSET([4,4,3,2,5,7],[4,3])</p><p>结果：true</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'bool',
    param: false,
  },
  {
    id: 'ARRAYGET',
    name: 'ARRAYGET',
    type: '集合函数',
    info: '<p>返回数据集中第几个值</p><p>例1：ARRAYGET([4,4,3,2,5,7],5)</p><p>结果：5</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'object',
    param: false,
  },
  {
    id: 'LARGE',
    name: 'LARGE',
    type: '集合函数',
    info: '<p>返回集合中第几大的值</p><p>例1：ARRAYGET([4,4,3,2,5,7],2)</p><p>结果：5</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'object',
    param: false,
  },
  {
    id: 'SMALL',
    name: 'SMALL',
    type: '集合函数',
    info: '<p>返回数据集中第几个最小值。</p><p>例1：SMALL([4,4,3,2,5,7],2)</p><p>结果：3<br/></p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'LISTADDALL',
    name: 'LISTADDALL',
    type: '集合函数',
    info: '<p>将所有参数组合为一个集合返回。</p><p>例1：LISTADDALL(4,5,&quot;aaa&quot;,2,52,5)</p><p>结果：[4, 5, aaa, 2, 52, 5]</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'object',
    param: false,
  },
  {
    id: 'LISTGET',
    name: 'LISTGET',
    type: '集合函数',
    info: '<p>获取集合中指定索引位置的元素。</p><p>例1：LISTGET([4, 5, &quot;aaa&quot;, 2, 52, 5],3)&quot;;</p><p>结果：2</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'object',
    param: false,
  },
  {
    id: 'LISTADD',
    name: 'LISTADD',
    type: '集合函数',
    info: '<p>向集合中添加多个元素。</p><p>例1：LISTADD([4, 5, &quot;aaa&quot;, 2, 52, 5],&quot;bbb&quot;)</p><p>结果：[4, 5, aaa, 2, 52, 5, bbb]</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'object',
    param: false,
  },
  {
    id: 'LISTRANDOM',
    name: 'LISTRANDOM',
    type: '集合函数',
    info: '<p>随机取集合中的某一元素。</p><p>例1：LISTRANDOM([4, 5, &quot;aaa&quot;, 2, 52, 5])</p><p><br/></p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'object',
    param: false,
  },
  {
    id: 'CONTAIN',
    name: 'CONTAIN',
    type: '集合函数',
    info: '<p>返回参数一集合中是否包含参数二，包含返回true，不包含返回false。</p><p>例1：CONTAIN([&quot;bbb&quot;,4,5,6,7],&quot;aa&quot;)</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'bool',
    param: false,
  },
  {
    id: 'LISTSUM',
    name: 'LISTSUM',
    type: '集合函数',
    info: '<p>返回集合中所有元素的累加和。</p><p>例1：LISTSUM([4,5,6,7])</p><p>结果：22<br/>注意：可用于<strong><span style="color: rgb(255, 0, 0);">表格中某列数据</span></strong>汇总求和运算。</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'OBJLISTSUM',
    name: 'OBJLISTSUM',
    type: '集合函数',
    info: '<p>返回参数1[对象数组]中对象的【某个属性】的累加和。</p><p>例:OBJLISTSUM([obj1,obj2,obj3],&#39;金额&#39;)。</p><p>注意：第一个参数为对象数组；第二个参数为对象中要汇总计算的属性名，用双引号包围。</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'ARRAYJOIN',
    name: 'ARRAYJOIN',
    type: '集合函数',
    info: '<p>使用间隔符将一个字符串数组连接，转为字符串</p><p>例：ARRAYJOIN(String[],&quot;-&quot;)</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'text',
    param: false,
  },
  {
    id: 'ARRAYINDEXOF',
    name: 'ARRAYINDEXOF',
    type: '集合函数',
    info: '返回集合中指定元素所在位置',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
];
