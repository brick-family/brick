import { IFunctionData } from '../../types';

/**
 * 数据函数
 */
export const MathFunctionData: IFunctionData[] = [
  {
    id: 'SUM',
    name: 'SUM',
    type: '数学函数',
    info: '这是一个数学函数',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'ADD',
    name: 'ADD',
    type: '数学函数',
    info: '<p>加法运算或正号<br/>例：ADD(5,6,7)<br/>注意：参数可以是多个数字</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'SUB',
    name: 'SUB',
    type: '数学函数',
    info: '<p>第一个数值减去第二个数值</p><p>例：SUBTRACT(20,6)<br/></p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'MULTIPLY',
    name: 'MULTIPLY',
    type: '数学函数',
    info: '<p>多个数值相乘</p><p>例：MULTIPLY(7,6,9,3)<br/></p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'DIVIDE',
    name: 'DIVIDE',
    type: '数学函数',
    info: '<p>第一个数值除以第二个数值<br/></p><p>例：DIVIDE(7,6)<br/></p><p>注意：第二个数值不能为0</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'AVERAGE',
    name: 'AVERAGE',
    type: '数学函数',
    info: '<p>求多个数值的平均值</p><p>例：AVERAGE(7,8,6,2)<br/></p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'MAX',
    name: 'MAX',
    type: '数学函数',
    info: '<p>返回一组数字中的最大值</p><p>例：MAX(7,8,9,6,5,4,7)</p><p>结果：9</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'MIN',
    name: 'MIN',
    type: '数学函数',
    info: '<p>返回最小的数值</p><p>例：MIN(7,8,9,6,5,4,7)</p><p>结果：4</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'ABS',
    name: 'ABS',
    type: '数学函数',
    info: '当数值为负数的时候返回他的绝对值数值',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'ROUND',
    name: 'ROUND',
    type: '数学函数',
    info: '<p>将数值四舍五入到整数位。<br/>例：ROUND(4.56221)</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'CEILING',
    name: 'CEILING',
    type: '数学函数',
    info: '<p>返回将参数向上舍入（沿绝对值增大的方向）为最接近的指定基数的倍数。</p><p>例：CEILING(4.56221,2)<br/>结果为：10</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'INTNUM',
    name: 'INTNUM',
    type: '数学函数',
    info: '<p>把数值组件的值向下舍入为整数</p><p>例：INTNUM(4.56221,2)<br/>结果为：4</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'LOG',
    name: 'LOG',
    type: '数学函数',
    info: '<p>根据指定底数返回数字的对数</p><p>例：LOG(4,2)<br/></p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'MOD',
    name: 'MOD',
    type: '数学函数',
    info: '<p>返回2个数值相除的余数</p><p>例：MOD(4,2)<br/></p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'POWER',
    name: 'POWER',
    type: '数学函数',
    info: '<p>计算出数值组件乘幂的值</p><p>例：POWER(4,2)<br/></p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'FIXED',
    name: 'FIXED',
    type: '数学函数',
    info: '<p>将数值1四舍五入到指定的小数位数</p><p>例：FIXED(4.5468,2)<br/></p><p>结果：4.55</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'SQRT',
    name: 'SQRT',
    type: '数学函数',
    info: '<p>取参数的平方根</p><p>例：SQRT(9)</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'PRODUCT',
    name: 'PRODUCT',
    type: '数学函数',
    info: '数字相乘',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'SUMPRODUCT',
    name: 'SUMPRODUCT',
    type: '数学函数',
    info: '<p>在两数值中，若其中存在数组，先将数组自身的元素相乘，返回两数值之和</p><p>例1：SUMPRODUCT([2,2,3],[1,2,3])<br/>结果：18</p><p>例2：SUMPRODUCT([2,2,3],2)</p><p>结果：14</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'FLOOR',
    name: 'FLOOR',
    type: '数学函数',
    info: '<p>将参数1向下舍入（沿绝对值减小的方向）为最接近的参数1的倍数。</p><p>例1：FLOOR(4.76,2)<br/>结果：8<br/>例2：FLOOR(-4.76,2)<br/>结果：-10</p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'number',
    param: false,
  },
  {
    id: 'DECIMALFORMAT',
    name: 'DECIMALFORMAT',
    type: '数学函数',
    info: '<p>格式化带有小数的数字</p><p>第一个参数为要格式化的数字；<br/></p><p>第二个参数为格式：<br/></p><p style="text-indent: 2em;">格式中主要以 # 和 0 两种占位符号来指定数字长度。0 表示如果位数不足则以 0 填充，# 表示只要有可能就把数字拉上这个位置。<br/></p><ul class=" list-paddingleft-2" style="list-style-type: disc;"><li><p style="text-indent: 0em;">0 ------ 取一位整数</p></li><li><p style="text-indent: 0em;">0.00 <span style="text-indent: 32px;">------</span> 取一位整数和两位小数</p></li><li><p style="text-indent: 0em;">00.000 <span style="text-indent: 32px;">------</span> 取两位整数和三位小数</p></li><li><p style="text-indent: 0em;"># <span style="text-indent: 32px;">------</span> 取所有整数部分</p></li><li><p style="text-indent: 0em;">#.##% <span style="text-indent: 32px;">------</span> 以百分比方式计数，并取两位小数</p></li><li><p style="text-indent: 0em;">#.#####E0 <span style="text-indent: 32px;">------</span> 显示为科学计数法，并取五位小数</p></li><li><p style="text-indent: 0em;">,### <span style="text-indent: 32px;">------</span> 每三位以逗号进行分隔，例如：299,792,458</p></li><li><p style="text-indent: 0em;">光速大小为每秒,###米 <span style="text-indent: 32px;">------</span> 将格式嵌入文本</p></li></ul><p><br/></p>',
    enableCache: true,
    reqCont: 0,
    jvsParamType: 'text',
    param: false,
  },
];
