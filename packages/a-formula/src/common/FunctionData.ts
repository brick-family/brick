export const data = [
  {
    title: '参数列表',
    type: 'tree',
    data: [
      {
        title: '表单字段',
        data: [
          {
            id: 'id',
            name: '数据id',
            info: 'id  数据id\n单行文本',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
        ],
      },
      {
        title: '系统参数',
        data: [
          {
            id: 'SYSuserId',
            name: '用户id',
            info: '当前用户的id',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
          {
            id: 'SYSRealName',
            name: '用户昵称',
            info: '当前用户的昵称',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
          {
            id: 'SYSAccountName',
            name: '用户帐号名',
            info: '当前用户的帐号名',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
          {
            id: 'SYSPhone',
            name: '用户手机号',
            info: '当前用户的手机号',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
          {
            id: 'SYSEmail',
            name: '用户邮箱',
            info: '当前用户的邮箱',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
          {
            id: 'SYSHeadImg',
            name: '用户头像',
            info: '当前用户的头像图片链接',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
          {
            id: 'SYSDeptId',
            name: '用户部门ID',
            info: '当前用户所在的部门ID',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
          {
            id: 'SYSUserEmployeeNo',
            name: '用户职工编号',
            info: '当前用户职工编号',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
          {
            id: 'SYSUserRole',
            name: '用户角色',
            info: '当前用户角色',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'array',
            param: true,
          },
          {
            id: 'SYSDeptName',
            name: '用户部门名称',
            info: '当前用户所在的部门名称',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
          {
            id: 'SYSDeptCode',
            name: '用户部门编码',
            info: '当前用户所在的部门编码',
            enableCache: false,
            reqCont: 0,
            jvsParamType: 'text',
            param: true,
          },
        ],
      },
    ],
  },
  {
    title: '函数列表',
    type: 'tree',
    data: [
      {
        title: '基础函数 - 数学函数',
        data: [
          {
            id: 'SUM',
            name: 'SUM',
            type: '数学函数',
            info: '这是一个数学函数',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'ADD',
            name: 'ADD',
            type: '数学函数',
            info: '<p>加法运算或正号<br/>例：ADD(5,6,7)<br/>注意：参数可以是多个数字</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'SUB',
            name: 'SUB',
            type: '数学函数',
            info: '<p>第一个数值减去第二个数值</p><p>例：SUBTRACT(20,6)<br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'MULTIPLY',
            name: 'MULTIPLY',
            type: '数学函数',
            info: '<p>多个数值相乘</p><p>例：MULTIPLY(7,6,9,3)<br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'DIVIDE',
            name: 'DIVIDE',
            type: '数学函数',
            info: '<p>第一个数值除以第二个数值<br/></p><p>例：DIVIDE(7,6)<br/></p><p>注意：第二个数值不能为0</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'AVERAGE',
            name: 'AVERAGE',
            type: '数学函数',
            info: '<p>求多个数值的平均值</p><p>例：AVERAGE(7,8,6,2)<br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'MAX',
            name: 'MAX',
            type: '数学函数',
            info: '<p>返回一组数字中的最大值</p><p>例：MAX(7,8,9,6,5,4,7)</p><p>结果：9</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'MIN',
            name: 'MIN',
            type: '数学函数',
            info: '<p>返回最小的数值</p><p>例：MIN(7,8,9,6,5,4,7)</p><p>结果：4</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'ABS',
            name: 'ABS',
            type: '数学函数',
            info: '当数值为负数的时候返回他的绝对值数值',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'ROUND',
            name: 'ROUND',
            type: '数学函数',
            info: '<p>将数值四舍五入到整数位。<br/>例：ROUND(4.56221)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'CEILING',
            name: 'CEILING',
            type: '数学函数',
            info: '<p>返回将参数向上舍入（沿绝对值增大的方向）为最接近的指定基数的倍数。</p><p>例：CEILING(4.56221,2)<br/>结果为：10</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'INTNUM',
            name: 'INTNUM',
            type: '数学函数',
            info: '<p>把数值组件的值向下舍入为整数</p><p>例：INTNUM(4.56221,2)<br/>结果为：4</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'LOG',
            name: 'LOG',
            type: '数学函数',
            info: '<p>根据指定底数返回数字的对数</p><p>例：LOG(4,2)<br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'MOD',
            name: 'MOD',
            type: '数学函数',
            info: '<p>返回2个数值相除的余数</p><p>例：MOD(4,2)<br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'POWER',
            name: 'POWER',
            type: '数学函数',
            info: '<p>计算出数值组件乘幂的值</p><p>例：POWER(4,2)<br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'FIXED',
            name: 'FIXED',
            type: '数学函数',
            info: '<p>将数值1四舍五入到指定的小数位数</p><p>例：FIXED(4.5468,2)<br/></p><p>结果：4.55</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'SQRT',
            name: 'SQRT',
            type: '数学函数',
            info: '<p>取参数的平方根</p><p>例：SQRT(9)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'PRODUCT',
            name: 'PRODUCT',
            type: '数学函数',
            info: '数字相乘',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'SUMPRODUCT',
            name: 'SUMPRODUCT',
            type: '数学函数',
            info: '<p>在两数值中，若其中存在数组，先将数组自身的元素相乘，返回两数值之和</p><p>例1：SUMPRODUCT([2,2,3],[1,2,3])<br/>结果：18</p><p>例2：SUMPRODUCT([2,2,3],2)</p><p>结果：14</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'FLOOR',
            name: 'FLOOR',
            type: '数学函数',
            info: '<p>将参数1向下舍入（沿绝对值减小的方向）为最接近的参数1的倍数。</p><p>例1：FLOOR(4.76,2)<br/>结果：8<br/>例2：FLOOR(-4.76,2)<br/>结果：-10</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'DECIMALFORMAT',
            name: 'DECIMALFORMAT',
            type: '数学函数',
            info: '<p>格式化带有小数的数字</p><p>第一个参数为要格式化的数字；<br/></p><p>第二个参数为格式：<br/></p><p style="text-indent: 2em;">格式中主要以 # 和 0 两种占位符号来指定数字长度。0 表示如果位数不足则以 0 填充，# 表示只要有可能就把数字拉上这个位置。<br/></p><ul class=" list-paddingleft-2" style="list-style-type: disc;"><li><p style="text-indent: 0em;">0 ------ 取一位整数</p></li><li><p style="text-indent: 0em;">0.00 <span style="text-indent: 32px;">------</span> 取一位整数和两位小数</p></li><li><p style="text-indent: 0em;">00.000 <span style="text-indent: 32px;">------</span> 取两位整数和三位小数</p></li><li><p style="text-indent: 0em;"># <span style="text-indent: 32px;">------</span> 取所有整数部分</p></li><li><p style="text-indent: 0em;">#.##% <span style="text-indent: 32px;">------</span> 以百分比方式计数，并取两位小数</p></li><li><p style="text-indent: 0em;">#.#####E0 <span style="text-indent: 32px;">------</span> 显示为科学计数法，并取五位小数</p></li><li><p style="text-indent: 0em;">,### <span style="text-indent: 32px;">------</span> 每三位以逗号进行分隔，例如：299,792,458</p></li><li><p style="text-indent: 0em;">光速大小为每秒,###米 <span style="text-indent: 32px;">------</span> 将格式嵌入文本</p></li></ul><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
        ],
      },
      {
        title: '基础函数 - 文字函数',
        data: [
          {
            id: 'CONTRACT',
            name: 'CONTRACT',
            type: '文字函数',
            info: '<p>这是一个文字函数，将多个文字组合起来，参数可使用多个</p><p>例如：CONTRACT(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;)</p><p>结果为： aabbcc</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'CONCATENAT',
            name: 'CONCATENAT',
            type: '文字函数',
            info: '<p>使用自定义连接符拼接多个字符串</p><p>例：CONCATENAT(&quot;-&quot;,&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;)<br/>注意：需要拼接的字符串至少为2个</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'LEFT',
            name: 'LEFT',
            type: '文字函数',
            info: '<p>从一个文本字符串的第一个字符开始返回指定个数的字符,如果文本长度小于自定字符个数，就将原始文本返回</p><p>例：LEFT(&quot;aaaaaaa&quot;,5)<br/><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'RIGHT',
            name: 'RIGHT',
            type: '文字函数',
            info: '<p>从一个文本字符串的最后一个字符开始返回指定个数的字符,如果文本长度小于自定字符个数，就将原始文本返回</p><p>例：RIGHT(&quot;aaaaaaa&quot;,5)<br/><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'LOWER',
            name: 'LOWER',
            type: '文字函数',
            info: '<p>将一个文本字符串中的所有大写字母转换为小写字母</p><p>例：LOWER(&quot;AAaaaa&quot;)<br/><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'UPPER',
            name: 'UPPER',
            type: '文字函数',
            info: '<p>将一个文本字符串中的所有小写字母转换为大写字母</p><p>例：UPPER(&quot;AAaaaa&quot;)<br/><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'REPLACE',
            name: 'REPLACE',
            type: '文字函数',
            info: '<p>替换参数1中的字符串，替换字符数为参数2，替换的内容为参数3。<br/>例1：REPLACE(&quot;aaabbbccc&quot;,&quot;ddd&quot;,&quot;bbb&quot;,)，<br/>结果为：aaadddccc</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'LEN',
            name: 'LEN',
            type: '文字函数',
            info: '<p>返回字符串中的字符个数</p><p>例：LEN(&quot;aaggsc&quot;)。</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'REPT',
            name: 'REPT',
            type: '文字函数',
            info: '<p>将文本重复指定次数</p><p>例：REPT(&quot;aaggsc&quot;,3)。</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'SEARCH',
            name: 'SEARCH',
            type: '文字函数',
            info: '<p>在第一个文本字符串中查找第二个文本字符串，并返回第一个文本字符串的起始位置的编号，该编号从第二个文本字符串的第一个字符算起。</p><p>例：SEARCH(&#39;vvsssddaaccaa&#39;,&quot;aa&quot;)</p><p>注意：返回 0 则表示未查找到。默认从第一个字符开始查找，如果需要从指定字符开始查找，填写第三个参数，表示从第几个字符开始查找。例如：SEARCH(&quot;aa&quot;,&#39;vvsssddaaccaa&#39;,5)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'MID',
            name: 'MID',
            type: '文字函数',
            info: '<p>截取<strong>参数1</strong>字符串，从<strong>参数2</strong>[数值]开始截取，截取<strong>参数3</strong>[数值]个字符。</p><p>例：MID(&quot;vvsssddaaccaa&quot;,3,4)<br/>结果为：sssd</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
        ],
      },
      {
        title: '基础函数 - 逻辑函数',
        data: [
          {
            id: 'NUMBERCOMP',
            name: 'NUMBERCOMP',
            type: '逻辑函数',
            info: '<p>数值组件与数值组件2比较，大于返回1，等于返回0，小于返回-1</p><p>例1：NUMBERCOMP(3,6)<br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'EQ',
            name: 'EQ',
            type: '逻辑函数',
            info: '<p>两个参数比较，相同返回 true，默认忽略大小写，若不忽略，则填写第三个参数true</p><p>例：EQ(&quot;aaa&quot;,&quot;bbb&quot;)<br/></p><p>结果：false</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'IF',
            name: 'IF',
            type: '逻辑函数',
            info: '<p>判断参数1是否为真；如果为真返回参数2，如果为假则返回数值3</p><p>例1：IF(EQ(&quot;aaa&quot;,&quot;aab&quot;),&quot;bbb&quot;,&quot;ccc&quot;)<br/></p><p>结果：ccc</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'ISEMPTY',
            name: 'ISEMPTY',
            type: '逻辑函数',
            info: '<p>判断参数是否为空；如果为空，则返回 true；如果不为空则返回 false</p><p>例1：ISEMPTY(&quot;ddd&quot;)<br/></p><p>结果：true</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'NE',
            name: 'NE',
            type: '逻辑函数',
            info: '<p>两个参数比较，不相同返回 true，默认忽略大小写，若不忽略，则填写第三个参数true</p><p>例：NE(&quot;aaa&quot;,&quot;bbb&quot;)<br/></p><p>结果：true</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'LT',
            name: 'LT',
            type: '逻辑函数',
            info: '<p>比较两参数值大小，参数1小于参数2返回 true</p><p>例1：LT(5,7)</p><p>结果：true</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'GT',
            name: 'GT',
            type: '逻辑函数',
            info: '<p>比较两参数值大小，参数1大于参数2返回 true</p><p>例1：GT(5,7)</p><p>结果：false</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'LE',
            name: 'LE',
            type: '逻辑函数',
            info: '<p>比较两参数值大小，参数1小于等于参数2返回 true</p><p>例1：LE(5,5)</p><p>结果：true</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'GE',
            name: 'GE',
            type: '逻辑函数',
            info: '<p>比较两参数值大小，参数1大于等于参数2返回 true</p><p>例1：GE(8,5)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'AND',
            name: 'AND',
            type: '逻辑函数',
            info: '<p>当参数组中的所有参数逻辑值为 true 时（逗号隔开的逻辑式子都满足），才返回 true，当参数组中的任何一个参数逻辑值为 false 时，就会返回false。</p><p>例1：AND(true,EQ(&quot;aa&quot;,&quot;aa&quot;),LT(3,5))</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'OR',
            name: 'OR',
            type: '逻辑函数',
            info: '<p>在参数组中，任何一个参数逻辑值为 true（逗号隔开的逻辑式子其中一项满足），即返回 true；只有当所有逻辑参数值为 false，才返回 false。</p><p>例1：OR(true,EQ(&quot;aa&quot;,&quot;ccc&quot;),LT(3,5))</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'NOT',
            name: 'NOT',
            type: '逻辑函数',
            info: '<p>对参数逻辑值求反。参数若为 true 则变成 false，参数若为 false 则变为 true。</p><p>例1：OR(true)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'ISVALIDINTEGER',
            name: 'ISVALIDINTEGER',
            type: '逻辑函数',
            info: '<p>判断参数是否为数字。</p><p>例1：ISVALIDINTEGER(&quot;bbb&quot;)</p><p>注意：<span style="color: rgb(255, 0, 0);">也可用于判断数字类型字段是否为空</span></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'ISNOTEMPTY',
            name: 'ISNOTEMPTY',
            type: '逻辑函数',
            info: '<p>判断字符类型参数是否不为空，为空返回false，不为空返回true。</p><p>例1：ISNOTEMPTY(&quot;bbb&quot;)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'DENGYU',
            name: 'DENGYU',
            type: '逻辑函数',
            info: '<p>判断两数值类型参数是否相等。</p><p>例1：DENGYU(4,5)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'ISNUMBER',
            name: 'ISNUMBER',
            type: '逻辑函数',
            info: '<p>判断参数是否为数字类型。</p><p>例1：ISNUMBER(&quot;bbb&quot;)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
        ],
      },
      {
        title: '基础函数 - 集合函数',
        data: [
          {
            id: 'INTERSECTI',
            name: 'INTERSECTI',
            type: '集合函数',
            info: '<p>计算两个集合的交集</p><p>例1：INTERSECTIONSET([5,6,7,7],[4,4,3,2,5,7])</p><p>结果：[5, 7]</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'UNIONSET',
            name: 'UNIONSET',
            type: '集合函数',
            info: '<p>计算两个集合的并集</p><p>例1：UNIONSET([5,6,7,7],[4,4,3,2,5,7])</p><p>结果：[5, 6, 7, 4, 3, 2]</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'DIFFERENCE',
            name: 'DIFFERENCE',
            type: '集合函数',
            info: '<p>计算两个集合的差集</p><p>例1：DIFFERENCE([5,6,7,7],[4,4,3,2,5,7])</p><p>结果：[6, 4, 3, 2]</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'SUBSET',
            name: 'SUBSET',
            type: '集合函数',
            info: '<p>计算第二个集合是否第一个集合的子集</p><p>例1：SUBSET([4,4,3,2,5,7],[4,3])</p><p>结果：true</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'ARRAYGET',
            name: 'ARRAYGET',
            type: '集合函数',
            info: '<p>返回数据集中第几个值</p><p>例1：ARRAYGET([4,4,3,2,5,7],5)</p><p>结果：5</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'LARGE',
            name: 'LARGE',
            type: '集合函数',
            info: '<p>返回集合中第几大的值</p><p>例1：ARRAYGET([4,4,3,2,5,7],2)</p><p>结果：5</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'SMALL',
            name: 'SMALL',
            type: '集合函数',
            info: '<p>返回数据集中第几个最小值。</p><p>例1：SMALL([4,4,3,2,5,7],2)</p><p>结果：3<br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'LISTADDALL',
            name: 'LISTADDALL',
            type: '集合函数',
            info: '<p>将所有参数组合为一个集合返回。</p><p>例1：LISTADDALL(4,5,&quot;aaa&quot;,2,52,5)</p><p>结果：[4, 5, aaa, 2, 52, 5]</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'LISTGET',
            name: 'LISTGET',
            type: '集合函数',
            info: '<p>获取集合中指定索引位置的元素。</p><p>例1：LISTGET([4, 5, &quot;aaa&quot;, 2, 52, 5],3)&quot;;</p><p>结果：2</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'LISTADD',
            name: 'LISTADD',
            type: '集合函数',
            info: '<p>向集合中添加多个元素。</p><p>例1：LISTADD([4, 5, &quot;aaa&quot;, 2, 52, 5],&quot;bbb&quot;)</p><p>结果：[4, 5, aaa, 2, 52, 5, bbb]</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'LISTRANDOM',
            name: 'LISTRANDOM',
            type: '集合函数',
            info: '<p>随机取集合中的某一元素。</p><p>例1：LISTRANDOM([4, 5, &quot;aaa&quot;, 2, 52, 5])</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'CONTAIN',
            name: 'CONTAIN',
            type: '集合函数',
            info: '<p>返回参数一集合中是否包含参数二，包含返回true，不包含返回false。</p><p>例1：CONTAIN([&quot;bbb&quot;,4,5,6,7],&quot;aa&quot;)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'LISTSUM',
            name: 'LISTSUM',
            type: '集合函数',
            info: '<p>返回集合中所有元素的累加和。</p><p>例1：LISTSUM([4,5,6,7])</p><p>结果：22<br/>注意：可用于<strong><span style="color: rgb(255, 0, 0);">表格中某列数据</span></strong>汇总求和运算。</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'OBJLISTSUM',
            name: 'OBJLISTSUM',
            type: '集合函数',
            info: '<p>返回参数1[对象数组]中对象的【某个属性】的累加和。</p><p>例:OBJLISTSUM([obj1,obj2,obj3],&#39;金额&#39;)。</p><p>注意：第一个参数为对象数组；第二个参数为对象中要汇总计算的属性名，用双引号包围。</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'ARRAYJOIN',
            name: 'ARRAYJOIN',
            type: '集合函数',
            info: '<p>使用间隔符将一个字符串数组连接，转为字符串</p><p>例：ARRAYJOIN(String[],&quot;-&quot;)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'ARRAYINDEXOF',
            name: 'ARRAYINDEXOF',
            type: '集合函数',
            info: '返回集合中指定元素所在位置',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
        ],
      },
      {
        title: '基础函数 - 时间函数',
        data: [
          {
            id: 'NOW',
            name: 'NOW',
            type: '时间函数',
            info: '<p>返回当前时间，格式为年-月-日 时-分-秒。</p><p>例1：NOW()</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'TIMEFORMAT',
            name: 'TIMEFORMAT',
            type: '时间函数',
            info: '<p>将时间戳转换为指定日期格式。</p><p>例1：TIMEFORMAT(&#39;2022-09-16 16:20:33&#39;,&#39;yyyy-MM-dd&#39;)</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'GETYEAR',
            name: 'GETYEAR',
            type: '时间函数',
            info: '<p>获取指定时间的年份。</p><p>例1：GETYEAR(&#39;2022-09-16 16:20:33&#39;)</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'GETMONTH',
            name: 'GETMONTH',
            type: '时间函数',
            info: '<p>获取指定时间的月份。</p><p>例1：GETMONTH(&#39;2022-09-16 16:20:33&#39;)</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'GETDATE',
            name: 'GETDATE',
            type: '时间函数',
            info: '<p>获取指定时间的天数，这个月的第几天。</p><p>例1：GETDATE(&#39;2022-09-16 16:20:33&#39;)</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'GETWEEKDAY',
            name: 'GETWEEKDAY',
            type: '时间函数',
            info: '<p>获取指定时间的星期几。</p><p>例1：GETWEEKDAY(&#39;2022-09-16 16:20:33&#39;)</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'COMPARETIME',
            name: 'COMPARETIME',
            type: '时间函数',
            info: '<p>比较两个时间的大小，<strong>日期参数1</strong>大于<strong>日期参数2</strong>返回 true，否则返回 false。</p><p>例1：COMPARETIME(&#39;2022-09-16 16:20:33&#39;,&#39;2022-09-12 19:20:33&#39;)</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'TIMEBETWEEN',
            name: 'TIMEBETWEEN',
            type: '时间函数',
            info: '<p>返回两个日期之间相差的天、月、年、小时等。</p><p>第三个参数使用不同的参数返回同的相差类型：<br/>天（DAYS）、<br/>周（WEEKS）、<br/>月（MONTHS）、<br/>年（YEARS）、<br/>小时（HOURS）、<br/>分钟（MINUTES）、<br/>秒（SECONDS）。</p><p>例1：TIMEBETWEEN(&#39;2022-09-16 16:20:33&#39;,&#39;2022-09-12 19:20:33&#39;,&#39;DAYS&#39;)</p><p>结果：3<br/></p><p>例2：TIMEBETWEEN(&#39;2022-09-16 16:20:33&#39;,&#39;2022-09-12 19:20:33&#39;,&#39;HOURS&#39;)<br/>结果：93</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'GETCHINESEZODIAC',
            name: 'GETCHINESEZODIAC',
            type: '时间函数',
            info: '<p>根据身份证号自动计算生肖。</p><p>例如：GETCHINESEZODIAC(&#39;549874455212544412&#39;)。</p><p>注意：参数为字符串类型。</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'GETZODIAC',
            name: 'GETZODIAC',
            type: '时间函数',
            info: '<p>根据身份证号自动计算星座。</p><p>例如：GETZODIAC(&#39;549874455212544412&#39;)。</p><p>注意：参数为字符串类型</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'QUARTER',
            name: 'QUARTER',
            type: '时间函数',
            info: '<p>获取日期所在的季度。</p><p>例如：QUARTER(‘2022-09-15 12:34:23’)。</p><p>注意：返回的季度从1开始计数。</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'DAYOFFSET',
            name: 'DAYOFFSET',
            type: '时间函数',
            info: '<p>日期增加或减少指定天数。</p><p>例如：DAYOFFSET(‘2022-09-15 12:34:23’,20)。</p><p>注意：第二个参数为负数时未减少天数</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'COMPAREDATE',
            name: 'COMPAREDATE',
            type: '时间函数',
            info: '<p>比较两个日期的大小，<strong>日期参数1</strong>大于<strong>日期参数2</strong>返回 true，否则返回 false。</p><p>例1：COMPAREDATE(&#39;2022-09-16&#39;,&#39;2022-09-12&#39;)</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
          {
            id: 'DATEFORMAT',
            name: 'DATEFORMAT',
            type: '时间函数',
            info: '<p>将日期转换为指定日期格式。</p><p>例1\ufffd\ufffd\ufffdDATEFORMAT(&#39;2022-09-16&#39;,&#39;yyyy-MM-dd HH:mm:ss&#39;)</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'DATEPARSE',
            name: 'DATEPARSE',
            type: '时间函数',
            info: '<p>自动识别时间格式，将日期转换为指定日期格式。<br/>例1：DATEPARSE(&quot;2022-09-05T03:21:23.825Z&quot;,&quot;yyyy-MMM-dd&quot;)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'PARSETIMESTAMP',
            name: 'PARSETIMESTAMP',
            type: '时间函数',
            info: '<p>将时间戳转换为日期格式（yyyy-MM-dd HH:mm:ss）。<br/>例1：PARSETIMESTAMP(1675612800000)</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'AGEOFNOW',
            name: 'AGEOFNOW',
            type: '时间函数',
            info: '根据日期计算当前年龄',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
        ],
      },
      {
        title: '基础函数 - 对象函数',
        data: [
          {
            id: 'SETVALUE',
            name: 'SETVALUE',
            type: '对象函数',
            info: '<p>修改对象数据中指定属性的值；第二个参数为要修改的属性名，第三个参数为修改的值。</p><p>例1：SETVALUE(obj,&quot;id&quot;,&quot;20222156&quot;)<br/></p><p>注意：若属性不存在则，在数据中新增属性及值。</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'COPYPROPER',
            name: 'COPYPROPER',
            type: '对象函数',
            info: '拷贝第一个对象的属性值到第二个对象。（仅拷贝属性名相同的值）',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'GETVALUE',
            name: 'GETVALUE',
            type: '对象函数',
            info: '<p>获取对象数据中指定属性的值。</p><p>例1：GETVALUE(date1,&#39;danWei&#39;)&quot;;</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
          {
            id: 'TOJSONOBJ',
            name: 'TOJSONOBJ',
            type: '对象函数',
            info: '<p>将json字符串转换为对象。</p><p>例1：TOJSONOBJ(&quot;{&quot;danWei&quot;:&quot;444&quot;,&quot;zongJia&quot;:555}&quot;)</p><p><br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'object',
            param: false,
          },
        ],
      },
      {
        title: '基础函数 - 数字函数',
        data: [
          {
            id: 'CONVERTDIGIT',
            name: 'CONVERTDIGIT',
            type: '数字函数',
            info: '<p>将金钱数转换为人民币大写形式。</p><p>例1：CONVERTDIGIT(7888.65)<br/>结果：肆万捌仟陆佰肆拾捌元伍角陆分</p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'text',
            param: false,
          },
          {
            id: 'CONVERTINT',
            name: 'CONVERTINT',
            type: '数字函数',
            info: '<p>将字符串转换为整型(整数)<br/>例：CONVERTINT(&#39;1356456&#39;)<br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'CONVERTDOUBLE',
            name: 'CONVERTDOUBLE',
            type: '数字函数',
            info: '<p>将字符串转换为浮点类型（小数）<br/>例：CONVERTDOUBLE(&#39;135.1324&#39;)<br/></p>',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'number',
            param: false,
          },
          {
            id: 'ISDECIMAL',
            name: 'ISDECIMAL',
            type: '数字函数',
            info: '判断当前数据是否是小数',
            enableCache: true,
            reqCont: 0,
            jvsParamType: 'bool',
            param: false,
          },
        ],
      },
    ],
  },
];
